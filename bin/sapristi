#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/setup'
require 'sapristi'

module Sapristi
  class Runner
    def initialize
      @sapristi = Sapristi.new
    end

    def run(args)
      options = ArgumentsParser.new.parse args
      build(options)

      options.file ? @sapristi.run(options.file) : @sapristi.run
    rescue Error => e
      exit_error 1, e.message
    rescue StandardError => e
      error_file = save_stacktrace e

      exit_error 2, "Sapristi crashed, see #{error_file}"
    end

    private

    def build(options)
      @sapristi.verbose! if options.verbose
      @sapristi.dry! if options.dry
      @sapristi.filter!(options.group) if options.group
    end

    def save_stacktrace(error)
      file = File.join '/tmp', "sapristi.stacktrace#{Time.new.to_i}.log"
      File.open(file, 'w') do |f|
        f.write "#{error.class}: #{error.message}\n\n"
        f.write error.backtrace.join("\n")
      end
      file
    end

    def exit_error(status, message)
      $stderr.puts message
      exit status
    end
  end
end

cmd_invocation = $PROGRAM_NAME == __FILE__
gem_bin_wrapper = File.basename($PROGRAM_NAME).eql?(File.basename(__FILE__))
Sapristi::Runner.new.run(ARGV) if cmd_invocation || gem_bin_wrapper
